@page "/create-tour";
@using Models;
@using Newtonsoft.Json;
@using Services;
@using System.Collections.Concurrent;
@using System.Text;
@using System.Threading;
@using static Services.CurrencyConverter;
@inject HttpClient HttpClient;
@inject NavigationManager NavigationManager;
@inject TourBuilder TourBuilder;
@inject CurrencyConverter CurrencyConverter;
@inject UserStateService UserStateService;

<title>Create Tour</title>

<style>
    .constructor-block {
        border-radius: 20px;
        background-color: rgba(255, 255, 255, 0.8);
    }

    .constructor-h6 {
        font-size: 18px;
        font-weight: 500;
    }

    .agency-card {
        width: 200px;
        padding: 0px 5px;
        display: inline-flex;
        border-radius: 10px;
        background-color: lightgray;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        align-items: center;
    }

    .day-container {
        position: relative;
        height: 60px;
    }

    .day-info {
        border-top: 1px dotted royalblue;
        background-color: white;
        padding: 10px 0 40px 10px;
        position: absolute;
        left: -100px;
    }

    .program {
        margin: 20px;
        border-radius: 20px;
        padding: 20px;
        background-color: white;
    }

        .program ul {
            margin: 0;
            list-style: none;
            position: relative;
            padding: 20px 104px;
        }

            .program ul:before {
                content: "";
                width: 1px;
                height: 100%;
                position: absolute;
                top: 0;
                border-left: 4px dashed royalblue;
            }

            .program ul li {
                position: relative;
                margin: 30px 0;
                margin-left: 30px;
                background-color: gainsboro;
                padding: 14px;
                border-radius: 10px;
                border: 1px solid grey;
                min-width: 300px;
                width: fit-content;
                max-width: 90%;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            }

                .program ul li.cut-top {
                    border-top-left-radius: 0px;
                    border-top-right-radius: 0px;
                }

                .program ul li.cut-bottom {
                    border-bottom-left-radius: 0px;
                    border-bottom-right-radius: 0px;
                }

                .program ul li > span {
                    width: 6px;
                    background: royalblue;
                    left: -32px;
                    top: 0;
                    position: absolute;
                }

                    .program ul li > span:before, .program ul li > span:after {
                        content: "";
                        width: 14px;
                        height: 14px;
                        border-radius: 50%;
                        border: 2px solid royalblue;
                        position: absolute;
                        background: white;
                        left: -4px;
                        top: -1px;
                    }

                .program ul li span:after {
                    top: calc(100% - 1px);
                }

                .program ul li > div {
                    margin-left: 10px;
                }

        .program div .title {
            font-weight: 600;
            font-size: 17px;
        }

        .program div .type {
            font-weight: 600;
            font-size: 16px;
        }

        .program div .info {
            font-weight: 300;
            display: inline-flex;
        }


        .program span.number {
            height: calc(100% - 8px);
        }

            .program span.number span {
                position: absolute;
                font-size: 14px;
                left: -46px;
                font-weight: bold;
            }

                .program span.number span:first-child {
                    top: -6px;
                }

                .program span.number span:last-child {
                    bottom: -15px;
                }

    .drop-button {
        text-decoration: none;
        margin: -5px;
    }

    .flipped {
        transform: rotate(180deg);
    }

    .form-row {
        display: inline-flex;
        width: 100%;
        height: 30px;
        align-items: baseline;
        margin-bottom: 10px;
    }

        .form-row h6 {
            min-width: fit-content;
            margin-right: 5px;
        }

        .form-row input {
            width: fit-content;
            font-size: small;
            padding: 5px;
            margin-right: 5px;
        }

    .act-container {
        display: inline-flex;
        padding-left: 30px;
    }

        .act-container button {
            margin-right: 10px;
            color: slateblue;
        }

    .order-btn {
        font-size: 20px;
        margin: 2px;
        border: 2px solid transparent;
    }

    .city-div {
        display: flex;
        flex-direction: column;
        position: relative;
        align-items: center;
    }
</style>

<div style="width: 100%;
    display: inline-flex;
    background-color: transparent;
    justify-content: center;">
    <div style="width: fit-content;
    margin: 10px;
    padding: 10px 20px;
    font-size: 24px;
    font-weight: 500;
    background-color: rgba(255, 255, 255, 0.5);
    border-radius: 20px;">
        New Tour
    </div>
</div>

<EditForm EditContext=editContext>
    <div class="card constructor-block" style="margin:10px 0 10px 0;">
        <div class="card-body" style="display: inline-flex; justify-content: space-between;">
            <div style="position: relative;
            display: inline-flex;
            width: 65%;
            border-radius: 10px;
            border: 1px solid burlywood;
            overflow: hidden;
            margin-right: 10px;
            align-items: center;
            justify-content: center;">
                @if (imageData != null)
                {
                    <img src="@imageData" style="width: 100%; height: fit-content;" />
                    <button type="button" class="btn-close text-white" style="position: absolute; top: 5px; right: 5px; background-color: rgba(128, 128, 128, 0.7); width: 20px; height: 20px; border-radius: 20px;" aria-label="Close" @onclick="ClearFile"></button>
                }
                else
                {
                    <h5 for="photo" class="form-label constructor-h6">Tour Image:</h5>
                    <InputFile id="photo" style="width: fit-content; margin:0 10px;" class="form-control" OnChange="HandleFileSelected" multiple="false" accept="image/jpeg, image/png, image/webp" />
                }
            </div>
            <div style="width: 33%;">
                <div style="display: inline-flex;
                @(tour.Agency is null ? "align-items: baseline;" : "align-items: center;")
                margin-top: 20px;">
                    <label class="form-label constructor-h6" style="margin-right: 10px;">Tour agency*:</label>
                    @if (tour.Agency != null)
                    {
                        <div class="agency-card">
                            <div style="display: block;">
                                <label style="font-size: 18px;">@tour.Agency.Name</label>
                                <label style="font-size: 16px;">@tour.Agency.Country.Name</label>
                            </div>
                            <button type="button" class="btn-close text-white" style="float: right; top: 5px;" aria-label="Close" @onclick="() => tour.Agency = null"></button>
                        </div>
                    }
                    else
                    {
                        <button type="button" class="primary-btn" @onclick="() => showTourAgencyComp = true">Register an agency</button>
                    }
                </div>
                <div style="margin-top: 20px;">
                    <h5 for="startDate" class="form-label constructor-h6">Start date of the tour*:</h5>
                    <InputDate id="startDate" style="width: fit-content;" @bind-Value="tour.StartDate" class="form-control" min="@DateTime.Today.AddDays(14)" />
                    <ValidationMessage For="@(() => tour.StartDate)" />
                </div>
                <div style="margin-top: 20px;">
                    <h5 for="currency" class="form-label constructor-h6">Currency*:</h5>
                    <select id="currency" class="form-select" @bind="CurrencyInput" style="width: 100px;">
                        @foreach (var curr in Enum.GetValues(typeof(CurrencyCode)))
                        {
                            var enumValue = (CurrencyCode)curr;
                            <option value="@enumValue">@enumValue.GetEnumMemberValue()</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => tour.Currency)" />
                </div>
                <div style="margin-top: 20px; margin-bottom: 20px;">
                    <h5>Maximum number of participants*:</h5>
                    <div style="display: inline-flex; align-items: flex-end;">
                        <h5 for="partCount" class="form-label constructor-h6">General*:</h5>
                        <InputNumber id="partCount" @bind-Value="tour.ParticipantsMaxNumber" @onchange="TourBuilder.RemoveTransfers" class="form-control" style="padding: 4px 10px;margin-left: 5px;max-width: 60px;" min="1" max="20" />
                    </div>
                    @if (tour.ParticipantsMaxNumber > 1)
                    {
                        <div style="display: inline-flex; align-items: flex-end; margin-left: 15px;">
                            <label for="childrenCount" class="form-label" style="font-size: 16px;">Children:</label>
                            <InputNumber id="childrenCount" @bind-Value="childrenNumber" @onchange="TourBuilder.RemoveTransfers" class="form-control" style="padding: 4px 10px;margin-left: 5px;max-width: 60px;" min="0" max="@(tour.ParticipantsMaxNumber - 1)" />
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="card constructor-block" style="margin:10px 0 10px 0;">
        <div class="card-body">
            <div class="mb-3 col-md-8 col-sm-6">
                <h5 for="title" class="form-label">Title*:</h5>
                <InputText id="title" style="font-size: 20px;" @bind-Value="tour.Title" class="form-control" />
                <ValidationMessage For="@(() => tour.Title)" />
            </div>

            <div class="mb-3">
                <h5 for="description" class="form-label">Tour Description*:</h5>
                <textarea id="description" @bind="tour.Description" class="form-control"></textarea>
                <ValidationMessage For="@(() => tour.Description)" />
            </div>
        </div>
    </div>

    <div style="width: 100%; text-align: center; display: inline-flex; justify-content: center; margin: 10px 0 10px 0;">
        <div class="card constructor-block" style="width: fit-content; padding: 0 20px;">
            <div class="card-body row">
                <label for="citiesList" class="form-label constructor-h6">List of cities:</label>
                <div style="width: 100%; display: inline-flex; align-items: center; justify-content: center;">
                    @for (int i = 0; i < tour.Cities.Count; i++)
                    {
                        int index = i;
                        <div class="city-div">
                            <img src="/icons/icons8-location-blue-74.png" style="width: 50px;" />
                            <h6>@tour.Cities[index].Name</h6>
                            <h6 style="font-size: 15px;">@tour.Cities[index].Country.Name</h6>
                            <button type="button" class="btn-close text-white" style="position: absolute; top: -5px; right: -5px; background-color: rgba(128, 128, 128, 0.7); width: 10px; height: 10px; border-radius: 20px;" aria-label="Close" @onclick="() => tour.Cities.RemoveAt(index)"></button>
                        </div>

                        <div style="margin: 0 10px;"><img src="/icons/icons8-направо-черное-24.png" /></div>
                    }
                    <div class="city-div">
                        <div>
                            <CountryComponent Country="@country" ResponseMessage="@responseMessage" OnUpdate="UpdateCountry" />
                        </div>
                        <div style="display: inline-flex;align-items: baseline;">
                            @if (country != null)
                            {
                                <input id="city" @bind="SelectedCity" class="form-control" list="cityList" placeholder="Англ назва міста" style="margin-top: 5px;max-width: 80%;margin-right: 5px;" />
                                <datalist id="cityList">
                                    @foreach (var city in filteredCities)
                                    {
                                        <option value="@city.Name">@city.Name</option>
                                    }
                                </datalist>
                                <button type="button" class="btn btn-primary" style="margin-top: 5px; border-radius: 20px;" @onclick="AddCityAsync">&#10003;</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div style="width: 100%; text-align: center; display: inline-flex; justify-content: center; margin: 10px 0 10px 0;">
        <div class="card constructor-block" style="width: fit-content; padding: 0 20px;">
            <div class="card-body row">
                <div class="mb-3 col-md-6">
                    <label for="includedOptions" class="form-label constructor-h6">Included in the tour price:</label>
                    <div>
                        <ul class="list-group mt-2">
                            @foreach (var inOption in tour.Included)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center" style="border-radius: 10px; padding-right: 5px;">
                                    @inOption
                                    <button type="button" class="btn-close text-white" style="background-color: rgba(128, 128, 128, 0.7); width: 20px; height: 20px; border-radius: 20px;" aria-label="Close" @onclick="() => tour.Included.Remove(inOption)"></button>
                                </li>
                            }
                        </ul>

                        <input id="includedOptions" @bind="selectedIncludedOption" class="form-control" list="IncludedOptionsList" style="margin-top: 5px;" />
                        <button type="button" class="additional-btn" style="margin-top: 5px;" @onclick="AddIncludedOption">Add an option</button>
                    </div>
                </div>

                <div class="mb-3 col-md-6">
                    <label for="notIncludedOptions" class="form-label constructor-h6">Not included:</label>
                    <div>
                        <ul class="list-group mt-2">
                            @foreach (var noOption in tour.NotIncluded)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center" style="border-radius: 10px; padding-right: 5px;">
                                    @noOption
                                    <button type="button" class="btn-close text-white" style="background-color: rgba(128, 128, 128, 0.7); width: 20px; height: 20px; border-radius: 20px;" aria-label="Close" @onclick="() => tour.NotIncluded.Remove(noOption)"></button>
                                </li>
                            }
                        </ul>
                        <input id="notIncludedOptions" @bind="selectedNotIncludedOption" class="form-control" list="notIncludedOptionsList" style="margin-top: 5px;" />
                        <button type="button" class="additional-btn" style="margin-top: 5px;" @onclick="AddNotIncludedOption">Add an option</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card constructor-block" style="margin: 10px 0 10px 0;">
        <div class="card-body">
            <div class="mb-3">
                <h5 for="program" class="form-label">Tour Program*:</h5>
                <div class="program">
                    @if (tour.StartDate != null)
                    {

                        <h6 style="margin-bottom: 0; border-bottom: 4px solid royalblue; width: 108px; font-size: 19px; font-weight: 600;">The beginning</h6>
                        <ul>
                            @{
                                DateTime day = tour.StartDate.Value.Date;
                                DateTime endDate = tour.HotelsOffers.Count > 0 ? tour.HotelsOffers.Last().CheckOutDate.Date : day.AddDays(-1);
                                endDate = tour.Program.Count > 0 ? (tour.Program.Last().EndDate.Date > endDate ? tour.Program.Last().EndDate.Date : endDate) : endDate;

                                do
                                {
                                    DateTime dayDate = day;
                                    tour.DayTitles.TryAdd(dayDate.ToShortDateString(), string.Empty);
                                    <div class="day-container">
                                        <div class="day-info form-row">
                                            <h6 style="font-weight: 600; font-size: 16px; margin-right: 10px;">
                                                @dayDate.ToString("M")
                                            </h6>
                                            <h6 style="font-size: 18px;">Day @((dayDate.Date - tour.StartDate.Value.Date).TotalDays + 1):</h6>
                                            <input style="font-size: 18px;" @bind="tour.DayTitles[dayDate.ToShortDateString()]" class="form-control" placeholder="Headline of the day" />
                                        </div>
                                    </div>

                                    if (tour.Program.Any(a => a.StartDate.Date == dayDate || a.EndDate.Date == dayDate))
                                    {
                                        for (int i = tour.Program.FindIndex(a => a.StartDate.Date == dayDate || a.EndDate.Date == dayDate);
                                        i <= tour.Program.FindLastIndex(a => a.StartDate.Date == dayDate || a.EndDate.Date == dayDate);
                                        i++)
                                        {
                                            int activityIndex = i;

                                            if (activityIndex == 0
                                            && tour.Program[activityIndex].StartDate.Date > tour.StartDate.Value.Date
                                            && tour.Program[activityIndex].StartDate.Date == dayDate)
                                            {
                                                <div class="act-container">
                                                    <button class="additional-btn" @onclick="() =>
                                                        CreatePoiOrSideActivity(tour.StartDate.Value, tour.Program[activityIndex].StartDate.AddHours(-0.5))">
                                                        Add a point of interest or local tour/event
                                                    </button>
                                                    <button class="additional-btn" @onclick="() =>
                                                        CreateTransfer(null, null, tour.StartDate.Value, false)">
                                                        Add transportation
                                                    </button>
                                                </div>
                                            }

                                            if (activityIndex > 0
                                            && (tour.Program[activityIndex].StartDate - tour.Program[activityIndex - 1].EndDate).TotalHours > 1.5
                                            && tour.Program[activityIndex].StartDate.Date == dayDate)
                                            {
                                                <div class="act-container">
                                                    <button class="additional-btn" @onclick="() =>
                                                        CreatePoiOrSideActivity(tour.Program[activityIndex - 1].EndDate.AddHours(0.5), tour.Program[activityIndex].StartDate.AddHours(-0.5))">
                                                        Add a point of interest or local tour/event
                                                    </button>
                                                    <button class="additional-btn" @onclick="() =>
                                                        CreateTransfer(null, null, tour.Program[activityIndex - 1].EndDate.AddHours(0.5), false)">
                                                        Add transportation
                                                    </button>
                                                </div>
                                            }
                                            <li class="@(tour.Program[activityIndex].StartDate.Date != dayDate ? "cut-top" : (tour.Program[activityIndex].EndDate.Date != dayDate ? "cut-bottom" : ""))">
                                                <span></span>
                                                <div>
                                                    <div style="display: inline-flex; width: 95%; margin-bottom: 5px;">
                                                        <h6 class="title">@tour.Program[activityIndex].Title</h6>
                                                        <h6 style="margin: 0 5px;"> | </h6>
                                                        <h6 class="type">@tour.Program[activityIndex].ActType.GetEnumMemberValue()</h6>
                                                    </div>

                                                    <button type="button" style="position: absolute; top: 5px; right: 5px;" class="btn-close text-white" aria-label="Close" @onclick="() => CancelActivity(tour.Program[activityIndex])"></button>

                                                    @switch (tour.Program[activityIndex])
                                                    {
                                                        case PointOfInteres poi:
                                                            {
                                                                <div class="info">
                                                                    <img src="@poi.PlaceIconUrl" height="40">
                                                                    <div style="margin-left: 10px; display: inline-flex; align-items: baseline; flex-wrap: wrap;">
                                                                        <h6>@poi.Name</h6>
                                                                        <h6 style="margin: 0 5px;"> | </h6>
                                                                        <h6>@poi.Category.GetEnumMemberValue()</h6>
                                                                        @if (poi.Rank != null)
                                                                        {
                                                                            <h6 style="margin: 0 5px;"> | </h6>
                                                                            <h6>Rank: @poi.Rank</h6>
                                                                        }
                                                                        @if (poi.Tags != null && poi.Tags.Count > 0)
                                                                        {
                                                                            <h6 style="margin: 0 5px;"> | </h6>
                                                                            <h6>Tags: @string.Join(", ", poi.Tags.Select(t => '#' + t).ToList())</h6>
                                                                        }
                                                                    </div>
                                                                </div>
                                                                break;
                                                            }
                                                        case TransferOffer transfer:
                                                            {
                                                                <div class="info" style="align-items: center;">
                                                                    <img src="@transfer.CarIconURL" height="60">
                                                                    <div style="margin-left: 10px; display: inline-flex; flex-wrap: wrap;">
                                                                        <h6>Type: @transfer.TranType.GetEnumMemberValue()</h6>
                                                                        <h6 style="margin: 0 5px;"> | </h6>
                                                                        <h6>Vehicle: @transfer.VehCategory.GetEnumMemberValue(), @transfer.VehType.GetEnumMemberValue()</h6>
                                                                        @if (transfer.Description != null)
                                                                        {
                                                                            <h6 style="margin: 0 5px;"> | </h6>
                                                                            <h6>@transfer.Description</h6>
                                                                        }
                                                                        <h6 style="margin: 0 5px;"> | </h6>
                                                                        <h6>@transfer.StartLocation.ShortAddress -> @transfer.EndLocation.ShortAddress</h6>
                                                                        <h6 style="margin: 0 5px;"> | </h6>
                                                                        <h6 style="font-weight: 700;">
                                                                            @(transfer.PriceAmount + transfer.Currency) (@(transfer.TranType is TransferOffer.TransferType.SHARED
                                                                            || transfer.TranType is TransferOffer.TransferType.AIRPORT_EXPRESS
                                                                            || transfer.TranType is TransferOffer.TransferType.AIRPORT_BUS
                                                                            ? "per person" : "per vehicle"))
                                                                        </h6>
                                                                    </div>
                                                                </div>
                                                                break;
                                                            }
                                                        case TourOrSideActivity side:
                                                            {
                                                                <div class="info" style="width: 100%;">
                                                                    @if (@side.PicturesUrls.Count > 0)
                                                                    {
                                                                        <img src="@side.PicturesUrls[0]" style="border-radius: 5px; width: 350px; max-width: 50%; height: fit-content;">
                                                                    }
                                                                    <div style="margin-left: 10px; display: block; width: calc(100% - 380px);">
                                                                        @if (!string.IsNullOrEmpty(side.Description))
                                                                        {
                                                                            sideDescriptionShow.TryAdd(activityIndex, false);
                                                                            <div style="width: 100%; display: inline-flex; align-items: flex-start;@(sideDescriptionShow[activityIndex] ? "" : " height: 60px; overflow: hidden;")">
                                                                                <h6 style="font-size: 15px; margin-right: 2px;@(sideDescriptionShow[activityIndex] ? "" : " overflow: hidden; text-overflow: ellipsis; white-space: nowrap;")">@((MarkupString)side.Description)</h6>

                                                                                <a role="button" class="drop-button @(sideDescriptionShow[activityIndex] ? " flipped" : "")"
                                                                                @onclick="() => sideDescriptionShow[activityIndex] = !sideDescriptionShow[activityIndex]">
                                                                                    <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" data-name="Layer 1" width="20" height="20" fill="currentColor" class="fi fi-tr-angle-small-down" viewBox="0 0 24 24">
                                                                                        <path d="m12,15c-.916,0-1.776-.356-2.424-1.004l-4.418-4.131c-.201-.188-.212-.505-.023-.707.188-.201.505-.212.707-.023l4.43,4.143c.941.939,2.527.928,3.445.012l4.441-4.154c.202-.188.519-.178.707.023.188.202.178.519-.023.707l-4.43,4.143c-.636.636-1.496.992-2.412.992Z" />
                                                                                    </svg>
                                                                                </a>
                                                                            </div>
                                                                        }
                                                                        <div style="display: inline-flex; width: 70%;">
                                                                            <h6 style="font-size: 15px;"><a href="@side.BookingLink" target="_blank">Website</a></h6>
                                                                            <h6 style="margin: 0 5px;"> | </h6>
                                                                            <h6 style="font-weight: 700;">@(side.PriceAmount + side.Currency)</h6>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                break;
                                                            }
                                                    }
                                                </div>
                                                <span class="number">
                                                    <span>@(tour.Program[activityIndex].StartDate.Date == dayDate ? tour.Program[activityIndex].StartDate.ToShortTimeString() : "")</span>
                                                    <span>@(tour.Program[activityIndex].EndDate.Date == dayDate ? tour.Program[activityIndex].EndDate.ToShortTimeString() : "")</span>
                                                </span>
                                            </li>
                                        }
                                    }

                                    @if (tour.Program.Count > 0 ? dayDate == tour.Program.Last().EndDate.Date
                                        : tour.HotelsOffers.Count > 0 ? dayDate == tour.HotelsOffers.First().CheckInDate.Date : true)
                                    {
                                        <div class="act-container">
                                            <button class="additional-btn" @onclick="() =>
                                                CreatePoiOrSideActivity(tour.Program.Count > 0 ? tour.Program.Last().EndDate.AddHours(0.5) : null, null)">
                                                Add a point of interest or local tour/event
                                            </button>
                                            <button class="additional-btn" @onclick="() =>
                                                CreateTransfer(null, null, tour.Program.Count > 0 ? tour.Program.Last().EndDate.AddHours(0.5) : null, false)">
                                                Add transportation
                                            </button>
                                        </div>
                                    }

                                    <div style="position: relative; height: 80px;">
                                        <div style="display: inline-flex; align-items: baseline; background-color: white; margin-top: 5px; padding: 10px; position: absolute; left: -75px;">
                                            @{
                                                var hotelOffer = tour.HotelsOffers.FirstOrDefault(ho => ho.CheckInDate.Date == dayDate || (ho.CheckInDate.Date < dayDate && ho.CheckOutDate.Date > dayDate));
                                                if (!string.IsNullOrEmpty(hotelOffer?.HotelId))
                                                {
                                                    var hotel = tour.Hotels.First(h => h.HotelId == hotelOffer.HotelId);
                                                    <h6 style="margin: 0; font-size: 16px; font-weight: 600;">
                                                        @hotel.Name
                                                    </h6>
                                                    <h6 style="margin: 0 5px;"> | </h6>
                                                    <h6 style="margin: 0; font-size: 15px;">@hotel.City.Name</h6>
                                                    @if (!tour.Program.Any(a =>
                                                    {
                                                        if (a is TransferOffer to)
                                                        {
                                                            return (to.EndLocation.PlaceId == hotel.PlaceId ||
                                                            (Math.Abs(to.EndLocation.Latitude - hotel.Location.Latitude) <= 0.0001 && Math.Abs(to.EndLocation.Longitude - hotel.Location.Longitude) <= 0.0001))
                                                            && (to.EndDate.Date == hotelOffer.CheckInDate.Date || to.EndDate.AddDays(1).Date == hotelOffer.CheckInDate.Date);
                                                        }
                                                        else
                                                            return false;
                                                    }))
                                                    {
                                                        <button style="margin-left: 10px; color: slateblue;" class="additional-btn" @onclick="() =>
                                                            CreateTransfer(null, hotel, hotelOffer.CheckInDate.AddDays(-1), true)">
                                                            Add transportation
                                                        </button>
                                                    }

                                                    <button type="button" style="margin-left: 20px;" class="btn-close text-white" aria-label="Close" @onclick="() => CancelHotelOffers(hotelOffer.OfferId)"></button>
                                                }
                                                else
                                                {
                                                    <button class="additional-btn" style="border-radius: 10px;" @onclick="() =>
                                                        CreateHotelOffer(dayDate, tour.HotelsOffers.FirstOrDefault(ho => ho.CheckInDate.Date >= dayDate)?.CheckInDate.Date)">
                                                        Add a hotel
                                                    </button>
                                                }
                                            }
                                        </div>
                                    </div>

                                    day = day.AddDays(1);
                                }
                                while (day <= endDate);
                            }
                        </ul>
                        <h6 style="margin-top: 0; border-top: 4px solid royalblue; width: 108px; font-size: 19px; font-weight: 600;">The end</h6>
                    }
                    else
                    {
                        <h6 style="color: red;">Select the start date of the tour</h6>
                    }
                </div>
            </div>
        </div>
    </div>


    @if (showTourAgencyComp)
    {
        <TourAgencyComponent Agency="tour.Agency" OnExit="(agency) =>
        {
            tour.Agency = agency;
            showTourAgencyComp = false;
            SetCurrency();
            StateHasChanged();
        }" />
    }

    @if (showHotelSearch)
    {
        <HotelSearchComponent TourBuilder="TourBuilder" StartDate="startHotelOfferDate" EndDate="endHotelOfferDate" OnExit="() => showHotelSearch = false" />
    }
    @if (showTransferSearch)
    {
        <TransferOfferComponent TourBuilder="TourBuilder" MinStartTime="minActStartTime" StartPlace="startTransfPlace"
                            EndPlace="endTransfPlace" IsFixedEndPlace="isFixedTransfEndPlace" Children="childrenNumber" OnExit="() => showTransferSearch = false" />
    }
    @if (showPoISideSearch)
    {
        <PoISideComponent TourBuilder="TourBuilder" MinStartTime="minActStartTime" MaxEndTime="maxActEndTime" OnExit="() => showPoISideSearch = false" />
    }

    @if (!string.IsNullOrEmpty(responseMessage))
    {
        <Notification ResponseMessage="@responseMessage" OnClose="() => responseMessage = string.Empty" />
    }

    <div style="position: fixed;
    z-index: 3;
    bottom: 30px;
    right: 30px;
    width: fit-content;
    border-radius: 21px;
    overflow: hidden;
    backdrop-filter: saturate(180%) blur(8px);
    background-color: rgba(250, 250, 252, 0.8);
    display: inline-flex;
    flex-direction: column;
    align-items: stretch;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.4);">
        <div style="display: inline-flex; margin: 10px; width: fit-content; justify-content: center; align-items: center;">
            @{
                double activitySum = 0, minHotelOfferPrice = 0, maxHotelOfferPrice = 0;

                if (tour.Program.Count > 0)
                {
                    List<Activity> activities = new();
                    activities.AddRange(tour.Program.OfType<TransferOffer>());
                    activities.AddRange(tour.Program.OfType<TourOrSideActivity>());

                    var groupedActivity = activities.GroupBy(ac => ac is TransferOffer to ? to.Currency : (ac as TourOrSideActivity).Currency);
                    foreach (var group in groupedActivity)
                    {
                        double sum = group.Sum(ac => (
                        ac is TransferOffer to
                        ? to.TranType is TransferOffer.TransferType.SHARED
                        || to.TranType is TransferOffer.TransferType.AIRPORT_EXPRESS
                        || to.TranType is TransferOffer.TransferType.AIRPORT_BUS
                        ? to.PriceAmount : (to.PriceAmount / ((double)tour.ParticipantsMaxNumber / 2.5))
                        : (ac as TourOrSideActivity).PriceAmount) ?? 0);
                        double convertedSum = !string.IsNullOrEmpty(tour.Currency) ? CurrencyConverter.Convert(sum, group.Key, tour.Currency) : 0;
                        activitySum += convertedSum;
                    }
                }

                if (tour.HotelsOffers.Count > 0)
                {
                    var groupedHotelsOffers = tour.HotelsOffers.GroupBy(ho => ho.CheckInDate);
                    List<HotelsOffer> minPrices = new();
                    List<HotelsOffer> maxPrices = new();
                    foreach (var group in groupedHotelsOffers)
                    {
                        minPrices.Add(group.MinBy(ho => (double)ho.PriceTotal));
                        maxPrices.Add(group.MaxBy(ho => (double)ho.PriceTotal));
                    }

                    var groupedMinPrices = minPrices.GroupBy(ho => ho.Currency);
                    var groupedMaxPrices = maxPrices.GroupBy(ho => ho.Currency);
                    foreach (var min in groupedMinPrices)
                    {
                        double sum = min.Sum(ho => (double)ho.PriceTotal);
                        minHotelOfferPrice += !string.IsNullOrEmpty(tour.Currency) ? CurrencyConverter.Convert(sum, min.Key, tour.Currency) : 0;
                    }
                    foreach (var max in groupedMaxPrices)
                    {
                        double sum = max.Sum(ho => (double)ho.PriceTotal);
                        maxHotelOfferPrice += !string.IsNullOrEmpty(tour.Currency) ? CurrencyConverter.Convert(sum, max.Key, tour.Currency) : 0;
                    }
                }

                tour.AmountRange = $"{Math.Round(minHotelOfferPrice + activitySum + tour.ExtraAmount, 2)} - {Math.Round(maxHotelOfferPrice + activitySum + tour.ExtraAmount, 2)} {tour.Currency.ToUpper()}";

                <h6 style="font-size: 16px; margin-right: 5px; font-weight: 600;">Price:</h6>
                <h6 style="font-size: 15px; font-weight: 600;">@(Math.Round(minHotelOfferPrice + activitySum + tour.ExtraAmount, 2))</h6>
                <h6 style="font-size: 15px; margin-left: 5px; margin-right: 5px; font-weight: 600;">-</h6>
                <h6 style="font-size: 15px; font-weight: 600;">@(Math.Round(maxHotelOfferPrice + activitySum + tour.ExtraAmount, 2))</h6>
                <h6 style="font-size: 15px; margin-left: 5px; font-weight: 600;">(@tour.Currency.ToLower())</h6>
                <h6 style="font-size: 15px; margin-left: 5px; margin-right: 5px;">+</h6>
                <InputNumber @bind-Value="tour.ExtraAmount" class="form-control" style="padding: 0px 4px;margin-left: 5px;max-width: 100px; margin-bottom: 0.5rem;" />
                <h6 style="font-size: 15px; margin-left: 5px;">(Extra charge)</h6>
            }
        </div>
        @if (tourBuilding)
        {
            <div style="width: 100%; display: inline-flex; z-index: 20; background-color: white; justify-content: center;">
                <img style="width: 70%;" src="/icons/plane.gif" alt="Loading..." />
            </div>
        }
        <button type="submit" class="primary-btn order-btn" @onclick="Create">Create a tour</button>
    </div>
</EditForm>

@code {
    private Tour tour = new();
    EditContext editContext = null!;
    private bool tourBuilding;
    private string responseMessage = string.Empty;
    private bool showTourAgencyComp = false;
    UploadImage? tourImage;
    private string? imageData;
    private CurrencyCode CurrencyInput
    {
        get => (CurrencyCode)Enum.Parse(typeof(CurrencyCode), tour.Currency);
        set => tour.Currency = value.GetEnumMemberValue();
    }
    private int childrenNumber = 0;

    private Country? country = null;
    private City? city = null;
    private string selectedCity = string.Empty;
    private string SelectedCity
    {
        get => selectedCity;
        set
        {
            selectedCity = value;
            SearchCities();
        }
    }
    private List<City> cities = new();
    private List<City> filteredCities = new();

    private bool showHotelSearch = false;
    private bool showTransferSearch = false;
    private bool showPoISideSearch = false;

    private Dictionary<int, bool> sideDescriptionShow = new();

    private string selectedIncludedOption = string.Empty;
    private string selectedNotIncludedOption = string.Empty;

    private void UpdateCountry(Country? _country, string message)
    {
        country = _country;
        responseMessage = message;

        if (country != null)
            Task.Run(async () =>
            {
                var citiesResponse = await HttpClient.GetAsync(NavigationManager.BaseUri + $"location/cities/{country.CCA2}");
                if (citiesResponse != null && citiesResponse.IsSuccessStatusCode)
                    cities = await citiesResponse.Content.ReadFromJsonAsync<List<City>>();
                else
                    responseMessage = await citiesResponse.Content.ReadAsStringAsync();
                await InvokeAsync(StateHasChanged);
            });

        StateHasChanged();
    }
    private void SearchCities()
    {
        if (string.IsNullOrEmpty(selectedCity) || selectedCity.Any(c => !char.IsAsciiLetter(c)))
        {
            selectedCity = string.Empty;
            return;
        }

        filteredCities = cities.Where(c => c.Name.Contains(selectedCity, StringComparison.OrdinalIgnoreCase))
            .OrderBy(c => c.Name).ToList();
    }
    private async Task AddCityAsync()
    {
        if (!string.IsNullOrWhiteSpace(selectedCity))
        {
            var chosenCity = cities.Find(c => c.Name.Equals(selectedCity));
            if (chosenCity != null)
            {
                city = chosenCity;
                city.Country = country;
                tour.Cities.Add(city);
                city = null;
                country = null;
            }
            else
            {
                var cityResponse = await HttpClient.GetAsync(NavigationManager.BaseUri + $"location/add-city/{country.CCA2}-{selectedCity}");
                if (cityResponse.IsSuccessStatusCode)
                {
                    string resultJson = await cityResponse.Content.ReadAsStringAsync();
                    var result = JsonConvert.DeserializeObject<List<City>>(resultJson);

                    if (result != null && result.Count == 1)
                    {
                        cities.Add(result[0]);
                        city = result[0];
                        tour.Cities.Add(city);
                        city = null;
                        country = null;
                        responseMessage = string.Empty;
                    }
                    else if (result != null && result.Count > 1)
                    {
                        cities.AddRange(result);

                        responseMessage = "New cities have been added to the list";
                    }
                    else
                        responseMessage = "The city was not found";
                }
                else
                {
                    responseMessage = await cityResponse.Content.ReadAsStringAsync();
                }
            }

            selectedCity = string.Empty;
            filteredCities.Clear();
        }
    }

    private void SetCurrency()
    {
        if (tour.Agency is not null && Enum.TryParse(typeof(CurrencyCode), tour.Agency.Country.Currencies.FirstOrDefault().Key, true, out object? code))
            CurrencyInput = (CurrencyCode)code;
        else
            CurrencyInput = CurrencyCode.USD;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            using (var stream = e.File.OpenReadStream())
            {
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    var bytes = memoryStream.ToArray();
                    tourImage = new()
                        {
                            Data = bytes,
                            Size = bytes.Length,
                            Name = e.File.Name,
                            ContentType = e.File.ContentType
                        };
                    imageData = $"data:image/{tourImage.ContentType};base64," + Convert.ToBase64String(bytes);
                }
            }
        }
    }
    private void ClearFile()
    {
        tourImage = null;
        imageData = null;
    }

    private void CancelActivity(Activity activity) => TourBuilder.RemoveActivity(activity);
    private void CancelHotelOffers(string offerId) => TourBuilder.RemoveHotelOffers(offerId);

    private DateTime? minActStartTime;
    private DateTime? maxActEndTime;
    private DateTime startHotelOfferDate;
    private DateTime? endHotelOfferDate;
    private GooglePlace? startTransfPlace;
    private GooglePlace? endTransfPlace;
    bool isFixedTransfEndPlace;

    private void CreatePoiOrSideActivity(DateTime? minStartTime, DateTime? maxEndTime)
    {
        minActStartTime = minStartTime;
        maxActEndTime = maxEndTime;
        showPoISideSearch = true;
    }
    private void CreateTransfer(GooglePlace? startPlace, GooglePlace? endPlace, DateTime? minStartTime, bool isFixedEndPlace)
    {
        startTransfPlace = startPlace;
        endTransfPlace = endPlace;
        minActStartTime = minStartTime;
        maxActEndTime = null;
        isFixedTransfEndPlace = isFixedEndPlace;
        showTransferSearch = true;
    }
    private void CreateHotelOffer(DateTime startDate, DateTime? endDate)
    {
        startHotelOfferDate = startDate;
        endHotelOfferDate = endDate;
        showHotelSearch = true;
    }

    private void AddIncludedOption()
    {
        if (selectedIncludedOption == string.Empty) return;

        tour.Included.Add(selectedIncludedOption);
        selectedIncludedOption = string.Empty;
    }
    private void AddNotIncludedOption()
    {
        if (selectedNotIncludedOption == string.Empty) return;

        tour.NotIncluded.Add(selectedNotIncludedOption);
        selectedNotIncludedOption = string.Empty;
    }

    private async Task Create()
    {
        responseMessage = string.Empty;

        bool isFormValid = editContext.Validate();

        if (!isFormValid)
            responseMessage += (string.IsNullOrEmpty(responseMessage) ? "" : "<br>") +
                $"Check the completeness of the form";

        if (tourImage == null)
            responseMessage += (string.IsNullOrEmpty(responseMessage) ? "" : "<br>") +
                $"Add a tour image";
        if (tour.ParticipantsMaxNumber < 1 || tour.ParticipantsMaxNumber > 20)
            responseMessage += (string.IsNullOrEmpty(responseMessage) ? "" : "<br>") +
                $"The maximum number of participants should be between 1-20 inclusive";
        if (tour.Program.Count < 1)
            responseMessage += (string.IsNullOrEmpty(responseMessage) ? "" : "<br>") +
                $"The tour must include at least one activity";
        foreach (var dayTitle in tour.DayTitles)
            if (string.IsNullOrEmpty(dayTitle.Value))
                responseMessage += (string.IsNullOrEmpty(responseMessage) ? "" : "<br>") +
                    $"Add a headline for the day {dayTitle.Key}";

        if (!string.IsNullOrEmpty(responseMessage))
            return;

        var imageUploadResponse = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "file/upload-tour-image", tourImage);

        if (imageUploadResponse.IsSuccessStatusCode)
        {
            tour.ImagePath = await imageUploadResponse.Content.ReadAsStringAsync();
            //tourImage = null;
        }
        else
        {
            responseMessage += (string.IsNullOrEmpty(responseMessage) ? "" : "<br>") +
                    $"Error recording a tour image: {await imageUploadResponse.Content.ReadAsStringAsync()}";
            return;
        }


        try
        {
            tourBuilding = true;
            await TourBuilder.BuildAsync();
            responseMessage = "<h5 style=\"color: green\">The tour was created successfully<h5>";
            StateHasChanged();
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            responseMessage += (string.IsNullOrEmpty(responseMessage) ? "" : "<br>") +
                $"{ex.Message}";
            var imageDeleteResponse = await HttpClient.GetAsync(NavigationManager.BaseUri + $"file/delete-file/{tour.ImagePath.Replace('/', '_')}");
            if (!imageDeleteResponse.IsSuccessStatusCode)
            {
                responseMessage += (string.IsNullOrEmpty(responseMessage) ? "" : "<br>") +
                    $"Error deleting a tour image: {await imageDeleteResponse.Content.ReadAsStringAsync()}";
                return;
            }
        }
        finally
        {
            tourBuilding = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new(tour);

        // Assigning the tour object to TourBuilder
        TourBuilder.Tour = tour;

        // Check if the user is not authenticated
        if (UserStateService.User is null)
        {
            // Save the current path and redirect to the login page
            var currentPath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            NavigationManager.NavigateTo($"login/{currentPath.Replace('/', '_')}");
        }
        // Check if the user does not have the manager role
        else if (UserStateService.User.Role.RoleName != "Manager")
        {
            // Redirect to the home page
            NavigationManager.NavigateTo("");
        }

        // Subscribe to the user update event to get agency information
        UserStateService.OnUserUpdate += async (user) => await GetAgency();

        // Subscribe to the authorization denial event to redirect to the home page
        UserStateService.OnAuthorizationDeny += () => NavigationManager.NavigateTo("/");

        // Call the method to get agency information
        await GetAgency();
    }

    private async Task GetAgency()
    {
        // Check if the user is not authorized
        if (UserStateService.User == null)
            NavigationManager.NavigateTo("/");

        // Send a request to get agency information by manager
        var agencyResponse = await HttpClient.GetAsync(NavigationManager.BaseUri + "tour/agency/get-by-manager");

        if (agencyResponse.IsSuccessStatusCode)
        {
            try
            {
                // Deserialize the response into a TourAgency object
                var agency = await agencyResponse.Content.ReadFromJsonAsync<TourAgency?>();

                // Check if the agency name is not empty
                if (!string.IsNullOrEmpty(agency?.Name))
                {
                    // Assign the agency to the tour
                    tour.Agency = agency;
                }

                // Set the visibility state of the agency component
                showTourAgencyComp = tour.Agency is null;

                // Call the method to set the currency
                SetCurrency();
            }
            catch (Exception ex)
            {
                string message = ex.ToString(); // Log the exception (not shown in the user interface)
            }
        }
        else
        {
            // Form an error message for the request
            responseMessage += (string.IsNullOrEmpty(responseMessage) ? "" : "<br>") +
                    $"Agency request error: {await agencyResponse.Content.ReadAsStringAsync()}";
        }

        // Update the component state
        await InvokeAsync(StateHasChanged);
    }
}