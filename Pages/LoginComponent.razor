@using Models
@using Services
@using System.Net
@using System.Net.Http.Json
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService

<style>
    .link {
        color: blueviolet;
        text-decoration: underline;
        cursor: pointer;
        transition: color 0.3s ease;
    }
        .link:hover {
            color: darkblue;
        }

    .form-label {
        font-size: 18px;
        font-weight: 600;
    }
</style>

@if (!string.IsNullOrEmpty(responseMessage))
{
    <Notification ResponseMessage="@responseMessage" OnClose="() => responseMessage = string.Empty" />
}

<EditForm EditContext=editContext OnValidSubmit=LoginAsync>
    <div class="logreg-container" style="border-radius: 20px; box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);">
        <div class="card">
            <div class="card-body" style="width: 500px; padding: 30px;">
                <div class="mb-3">
                    <label for="inputEmail" class="form-label">Email</label>
                    <InputText @onblur="CheckFields" @bind-Value="model.Email" class="form-control" id="inputEmail" />
                    <ValidationMessage For="() => model.Email" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="inputPassword" class="form-label">Password</label>
                    <InputText @onblur="CheckFields" @bind-Value="model.Password" type="password" class="form-control" id="inputPassword" />
                    <ValidationMessage For="() => model.Password" class="text-danger" />
                </div>

                <DataAnnotationsValidator />
                <div class="mb-2" style="margin-top: 20px; width: 100%; display: inline-flex; justify-content: center; align-items: center;">
                    <button class="primary-btn" type="Submit">
                        Login
                    </button>
                    <button class="secondary-btn" @onclick="OnExit">
                        Cancel
                    </button>
                </div>
                <div style="width: 100%; display: inline-flex; justify-content: center;">
                    <p class="text-muted" style="margin: 0;">Don't have an account yet? <a class="link" @onclick="OnRegistration">Sign up here</a>.</p>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    LoginModel model = new ();
    private EditContext editContext = null!;
    string responseMessage = string.Empty;
    bool isFormValid = false;
    int attemptsCount = 3;
    User? user = null;


    protected override void OnInitialized() => editContext = new(model);

    private async Task LoginAsync()
    {
        responseMessage = string.Empty;

        // Performing a POST request for login
        var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "account/login", model);

        if (response.IsSuccessStatusCode)
        {
            // If login is successful, update success message
            responseMessage = "<h5 style=\"color: green\">You have successfully logged in<h5>";
            StateHasChanged();

            // Reading user from response
            user = await response.Content.ReadFromJsonAsync<User>();

            await Task.Delay(1000);

            // Updating user state and invoking exit event
            UserStateService.Update(user);
            await OnExit.InvokeAsync();
        }
        else if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            // If response is 400 Bad Request, decrement attempts count and update error message
            attemptsCount--;
            responseMessage = await response.Content.ReadAsStringAsync();
            responseMessage += (string.IsNullOrEmpty(responseMessage) ? "" : "<br>") +
                $"You have {attemptsCount} {(attemptsCount > 1 ? "attempts" : "attempt")} left";
        }
        else
        {
            // In other cases, update error message
            responseMessage = await response.Content.ReadAsStringAsync();
        }

        // If attempts count is less than one, invalidate the form
        if (attemptsCount < 1) isFormValid = false;

        // Update component state
        StateHasChanged();
    }

    private void CheckFields()
    {
        isFormValid = editContext.Validate() && attemptsCount > 0;
        if (attemptsCount == 0)
            responseMessage += (string.IsNullOrEmpty(responseMessage) ? "" : "<br>") +
                    $"You're out of tries";
    }

    [Parameter] public EventCallback OnExit { get; set; }
    [Parameter] public EventCallback OnRegistration { get; set; }
}