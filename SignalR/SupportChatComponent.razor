@inherits ComponentBase
@using Models
@using System.Globalization
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime

<style>
    .chat-container {
        height: 300px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        padding: 15px;
        padding-right: 10px;
        scrollbar-width: thin;
        scrollbar-color: transparent transparent;
    }
        .chat-container::-webkit-scrollbar {
            width: 5px;
        }
        .chat-container::-webkit-scrollbar-thumb {
            background-color: transparent;
        }

    .log-reg {
        text-align: center;
        align-self: center;
    }

    .message {
        max-width: 60%;
        width: fit-content;
        border: 1px solid #ccc;
        margin-bottom: 8px;
        padding: 4px 8px;
        border-radius: 15px;
    }

    .message-user {
        align-self: flex-end;
        background-color: royalblue;
        border-color: royalblue;
        color: antiquewhite;
    }

    .message-system {
        text-align: center;
        align-self: center;
        background-color: lightgrey;
        max-width: 80%;
    }

    .new-mess-marker {
        width: 100%;
        height: fit-content;
        text-align: center;
        padding: 2px;
        margin-bottom: 8px;
        background-color: lightgrey;
        color: royalblue;
        font-size: 12px;
        border-radius: 3px;
    }

    .date-marker {
        height: fit-content;
        padding: 2px 5px;
        margin-bottom: 8px;
        align-self: center;
        background-color: lightgrey;
        color: royalblue;
        font-size: 12px;
        border-radius: 10px;
    }

    .message-top {
        border-bottom-left-radius: 5px;
        margin-bottom: 2px;
    }

    .message-top-user {
        border-bottom-right-radius: 5px;
        margin-bottom: 2px;
    }

    .message-middle {
        border-top-left-radius: 5px;
        border-bottom-left-radius: 5px;
        margin-bottom: 2px;
    }

    .message-middle-user {
        border-top-right-radius: 5px;
        border-bottom-right-radius: 5px;
        margin-bottom: 2px;
    }

    .message-bottom {
        border-top-left-radius: 5px;
        margin-bottom: 8px;
    }

    .message-bottom-user {
        border-top-right-radius: 5px;
        margin-bottom: 8px;
    }

    .message-sender {
        font-weight: bold;
        font-size: smaller;
        color: red;
    }

    .message-content {
        word-wrap: break-word;
        margin-bottom: 0px;
        font-size: 15px;
    }

    .message-time {
        font-size: 0.8em;
        color: #888;
        float: right;
        margin: 6px -2px -3px 5px;
    }

    .message-time-user {
        font-size: 0.8em;
        color: antiquewhite;
        float: right;
        margin: 6px -2px -3px 5px;
    }

    .user-input {
        margin-right: 10px;
        border-radius: 5px 5px 5px 5px;
    }

    .send-button {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        border-radius: 100%;
        font-size: 26px;
        transform: rotate(-90deg);
        text-decoration: none;
        transition: color .2s ease-in-out;
    }
</style>

<div @ref="chatContainer" class="card-body chat-container">
    @if (Chat != null && Chat.Messages.Count > 0)
    {
        for (int i = 0; i < Chat.Messages.Count; i++)
        {
            if (i == 0 || (i > 0 && Chat.Messages[i - 1].DispatchTime.Date != Chat.Messages[i].DispatchTime.Date))
            {
                <div class="date-marker">
                    @ToLocalTime(Chat.Messages[i].DispatchTime).ToString("dd MMM")
                </div>
            }
            if (i > 0 && Chat.Messages[i].SenderEmail != UserEmail && (Chat.Messages[i - 1].IsRead && !Chat.Messages[i].IsRead))
            {
                <div class="new-mess-marker">
                    New messages
                </div>
            }

            if (Chat.Messages[i].SenderName == "System")
            {
                <div class="message message-system">
                    <div class="message-content">
                        @Chat.Messages[i].Content
                        <div class="message-time">@ToLocalTime(Chat.Messages[i].DispatchTime).ToString("H:mm", CultureInfo.InvariantCulture)</div>
                    </div>
                </div>
            }
            else if (Chat.Messages[i].SenderEmail == UserEmail)
            {
                if ((i == 0 || (i > 0 && (Chat.Messages[i - 1].SenderEmail != Chat.Messages[i].SenderEmail || (Chat.Messages[i].DispatchTime - Chat.Messages[i - 1].DispatchTime).TotalMinutes > 5)))
                    && i + 1 < Chat.Messages.Count 
                    && Chat.Messages[i + 1].SenderEmail == Chat.Messages[i].SenderEmail
                    && (Chat.Messages[i + 1].DispatchTime - Chat.Messages[i].DispatchTime).TotalMinutes <= 5)
                {
                    <div class="message message-user message-top-user">
                        <div class="message-content">
                            @Chat.Messages[i].Content
                            <div class="message-time-user">@ToLocalTime(Chat.Messages[i].DispatchTime).ToString("H:mm", CultureInfo.InvariantCulture)</div>
                        </div>
                    </div>
                }
                else if ((i > 0 && i + 1 < Chat.Messages.Count)
                    && Chat.Messages[i - 1].SenderEmail == Chat.Messages[i].SenderEmail
                    && Chat.Messages[i + 1].SenderEmail == Chat.Messages[i].SenderEmail
                    && (Chat.Messages[i + 1].DispatchTime - Chat.Messages[i].DispatchTime).TotalMinutes <= 5)
                {
                    <div class="message message-user message-middle-user">
                        <div class="message-content">
                            @Chat.Messages[i].Content
                            <div class="message-time-user">@ToLocalTime(Chat.Messages[i].DispatchTime).ToString("H:mm", CultureInfo.InvariantCulture)</div>
                        </div>
                    </div>
                }
                else if (i > 0 && Chat.Messages[i - 1].SenderEmail == Chat.Messages[i].SenderEmail
                && ((i + 1 == Chat.Messages.Count && (Chat.Messages[i].DispatchTime - Chat.Messages[i - 1].DispatchTime).TotalMinutes <= 5) || (i + 1 < Chat.Messages.Count && (Chat.Messages[i + 1].SenderEmail != Chat.Messages[i].SenderEmail
                || (
                (Chat.Messages[i + 1].DispatchTime - Chat.Messages[i].DispatchTime).TotalMinutes > 5
                && (Chat.Messages[i].DispatchTime - Chat.Messages[i - 1].DispatchTime).TotalMinutes <= 5)))))
                {
                    <div class="message message-user message-bottom-user">
                        <div class="message-content">
                            @Chat.Messages[i].Content
                            <div class="message-time-user">@ToLocalTime(Chat.Messages[i].DispatchTime).ToString("H:mm", CultureInfo.InvariantCulture)</div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="message message-user">
                        <div class="message-content">
                            @Chat.Messages[i].Content
                            <div class="message-time-user">@ToLocalTime(Chat.Messages[i].DispatchTime).ToString("H:mm", CultureInfo.InvariantCulture)</div>
                        </div>
                    </div>
                }
            }
            else
            {
                if ((i == 0 || (i > 0 && (Chat.Messages[i - 1].SenderEmail != Chat.Messages[i].SenderEmail || (Chat.Messages[i].DispatchTime - Chat.Messages[i - 1].DispatchTime).TotalMinutes > 5)))
                    && i + 1 < Chat.Messages.Count
                    && Chat.Messages[i + 1].SenderEmail == Chat.Messages[i].SenderEmail
                    && (Chat.Messages[i + 1].DispatchTime - Chat.Messages[i].DispatchTime).TotalMinutes <= 5)
                {
                    <div class="message message-top">
                        <span class="message-sender">@Chat.Messages[i].SenderName</span>
                        <div class="message-content">
                            @Chat.Messages[i].Content
                            <div class="message-time">@ToLocalTime(Chat.Messages[i].DispatchTime).ToString("H:mm", CultureInfo.InvariantCulture)</div>
                        </div>
                    </div>
                }
                else if ((i > 0 && i + 1 < Chat.Messages.Count)
                    && Chat.Messages[i - 1].SenderEmail == Chat.Messages[i].SenderEmail
                    && Chat.Messages[i + 1].SenderEmail == Chat.Messages[i].SenderEmail
                    && (Chat.Messages[i + 1].DispatchTime - Chat.Messages[i].DispatchTime).TotalMinutes <= 5)
                {
                    <div class="message message-middle">
                        <div class="message-content">
                            @Chat.Messages[i].Content
                            <div class="message-time">@ToLocalTime(Chat.Messages[i].DispatchTime).ToString("H:mm", CultureInfo.InvariantCulture)</div>
                        </div>
                    </div>
                }
                else if (i > 0 && Chat.Messages[i - 1].SenderEmail == Chat.Messages[i].SenderEmail
                && ((i + 1 == Chat.Messages.Count && (Chat.Messages[i].DispatchTime - Chat.Messages[i - 1].DispatchTime).TotalMinutes <= 5) || (i + 1 < Chat.Messages.Count && (Chat.Messages[i + 1].SenderEmail != Chat.Messages[i].SenderEmail
                || (
                (Chat.Messages[i + 1].DispatchTime - Chat.Messages[i].DispatchTime).TotalMinutes > 5
                && (Chat.Messages[i].DispatchTime - Chat.Messages[i - 1].DispatchTime).TotalMinutes <= 5)))))
                {
                    <div class="message message-bottom">
                        <div class="message-content">
                            @Chat.Messages[i].Content
                            <div class="message-time">@ToLocalTime(Chat.Messages[i].DispatchTime).ToString("H:mm", CultureInfo.InvariantCulture)</div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="message">
                        <span class="message-sender">@Chat.Messages[i].SenderName</span>
                        <div class="message-content">
                            @Chat.Messages[i].Content
                            <div class="message-time">@ToLocalTime(Chat.Messages[i].DispatchTime).ToString("H:mm", CultureInfo.InvariantCulture)</div>
                        </div>
                    </div>
                }
            }
        }
    }
    else
    {
        <div class="message message-system">
            <div class="message-content">
                This chat is empty, send the first message
            </div>
        </div>
    }
</div>
<div class="card-footer">
    <div style="width: 100%; display: inline-flex;">
        <input @bind-value="userInput" type="text" class="form-control user-input" placeholder="Message..." />
        <div class="input-group-append">
            <a class="send-button" role="button" @onclick="SendMessage">
                ➤
            </a>
        </div>
    </div>
</div>

@code {
    [Parameter] public string UserEmail { get; set; } = null!;
    [Parameter] public Chat Chat { get; set; } = null!;
    [Parameter] public int TimeZoneOffset { get; set; }
    private string userInput = string.Empty;
    private ElementReference chatContainer;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", chatContainer);
            if (Chat.Messages.Any(m => !m.IsRead && m.SenderEmail != UserEmail))
            {
                await OnRead?.Invoke(UserEmail, Chat.ChatId);
                Chat.Messages.Where(m => !m.IsRead && m.SenderEmail != UserEmail).ToList().ForEach(m => m.IsRead = true);
            }
        }
    }

    private DateTime ToLocalTime(DateTime utcTime) => utcTime.AddMinutes(-TimeZoneOffset);

    public async Task SendMessage()
    {
        if (userInput == string.Empty) return;

        await ReceiveMessage(new()
        {
            SenderEmail = UserEmail,
            SenderName = "You",
            Content = userInput,
            IsRead = true
        });

        string receiverEmail = Chat?.InterlocutorsEmails.FirstOrDefault(e => e != UserEmail) ?? "";
        await OnSend?.Invoke(userInput, Chat.ChatId);
        userInput = string.Empty;
        await InvokeAsync(StateHasChanged);
        await JSRuntime.InvokeVoidAsync("scrollToBottom", chatContainer);
    }

    public async Task ReceiveMessage(Message message)
    {
        Task? readTask = null;
        if (!message.IsRead)
        {
            message.IsRead = true;
            readTask = OnRead?.Invoke(UserEmail, Chat.ChatId);
        }
        Chat.Messages.Add(message);
        if (readTask != null) await readTask;
        await InvokeAsync(StateHasChanged);
        await JSRuntime.InvokeVoidAsync("scrollToBottom", chatContainer);
    }

    [Parameter] public Func<string, long, Task>? OnSend { get; set; }
    [Parameter] public Func<string, long, Task>? OnRead { get; set; }
}